-- Skema Database:
CREATE DATABASE slink;

USE slink;

CREATE TABLE users(
id int primary key auto_increment,
nama varchar(255),
email varchar(255) unique,
username varchar(255) unique,
password varchar(255),
waktu_bergabung datetime default current_timestamp(),
bio text,
verified bool default 0
);

INSERT INTO users VALUES(NULL, "Akun Test-1", NULL, "test1", "12345", NOW(), NULL, '');
INSERT INTO users VALUES(NULL, "Akun Test-2", NULL, "test2", "12345", NOW(), NULL, '');
INSERT INTO users VALUES(NULL, "Akun Test-3", NULL, "test3", "12345", NOW(), NULL, '');
INSERT INTO users VALUES(NULL, "Akun Test-4", NULL, "test4", "12345", NOW(), NULL, '');

CREATE VIEW profile AS SELECT id, nama, username, email, bio, waktu_bergabung FROM users;

CREATE TABLE posts(
id int primary key auto_increment,
judul varchar(255),
deskripsi varchar(255),
link varchar(255),
waktu_aksi datetime default current_timestamp(),
user_id int,
FOREIGN KEY(user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

INSERT INTO posts VALUES(NULL, 'Cara Menjadi Ayam','Tutorial berubah wujud','link-a',NOW(),1);
INSERT INTO posts VALUES(NULL, 'Cara Menjadi Sapi','Tutorial berubah','link-a',NOW(),2);
INSERT INTO posts VALUES(NULL, 'Buat Dihapus','Hpus Kuy','link-hapus',NOW(),1);
INSERT INTO posts VALUES(NULL, 'Test','sds','link-hapus',NOW(),4);
INSERT INTO posts VALUES(NULL, 'Test2','sds','link-hapus',NOW(),4);
INSERT INTO posts VALUES(NULL, 'Test3','sds','link-hapus',NOW(),4);

CREATE TABLE comments(
id int primary key auto_increment,
komentar text,
post_id int,
user_id int,
parent_comment_id int,
waktu_komentar datetime default current_timestamp(),
FOREIGN KEY(user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY(post_id) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE
);

INSERT INTO comments VALUES(NULL, 'Gagal jadi ayam...', 1, 2, 0, NOW());
INSERT INTO comments VALUES(NULL, 'Ah berhasil', 1, 2, 1, NOW());
INSERT INTO comments VALUES(NULL, 'Noh berhasil', 1, 1, 1, NOW());
INSERT INTO comments VALUES(NULL, 'Gagal jadi ayam...', 1, 2, 0, NOW());

CREATE TABLE likes(
post_id int,
user_id int,
FOREIGN KEY(user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY(post_id) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE,
CONSTRAINT Composite_Unique unique(post_id, user_id)
);


INSERT INTO likes VALUES(3, 1);
INSERT INTO likes VALUES(1, 3);
INSERT INTO likes VALUES(6, 3);

CREATE TABLE follows(
user_id int,
follower_id int,
FOREIGN KEY(user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY(follower_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
CONSTRAINT Composite_Unique unique(user_id, follower_id)
);

INSERT INTO follows VALUES(3, 1);
INSERT INTO follows VALUES(1, 3);
INSERT INTO follows VALUES(3, 2);
INSERT INTO follows VALUES(1, 4);
INSERT INTO follows VALUES(2, 1);
INSERT INTO follows VALUES(2, 4);
INSERT INTO follows VALUES(1, 2);
INSERT INTO follows VALUES(4, 2);


CREATE TABLE bookmarks(
post_id int,
user_id int,
FOREIGN KEY(user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY(post_id) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE,
CONSTRAINT Composite_Unique unique(post_id, user_id)
);

INSERT INTO bookmarks VALUES(1,4);
INSERT INTO bookmarks VALUES(2,4);
INSERT INTO bookmarks VALUES(3,1);

CREATE TABLE otp(
email varchar(255),
otp_code varchar(6)
);

INSERT INTO otp VALUES("rdsuryamp@upi.edu", 202342);

-- Trigger Tabel otp untuk Verifikasi di Tabel users
DELIMITER //
CREATE TRIGGER deleteOtp
BEFORE DELETE ON otp
FOR EACH ROW

BEGIN
UPDATE users SET verified = 1 WHERE email = OLD.email;
END//

DELIMITER ;

-- Fungsi Menghitung Like Suatu Post
DELIMITER //
CREATE FUNCTION getPostLikes(postId INT)
RETURNS int
BEGIN

DECLARE likes_temp int; 
SELECT COUNT(*) INTO likes_temp FROM likes WHERE post_id = postId; 
RETURN likes_temp;

END//
DELIMITER ;

-- Fungsi Cek apakah Post Sudah di Like
DELIMITER //
CREATE FUNCTION checkPostLiked(userId INT ,postId INT)
RETURNS tinyint
BEGIN

DECLARE status int;
DECLARE row_temp int;
SELECT COUNT(*) INTO row_temp FROM likes WHERE post_id = postId AND user_id = userId ; 
IF row_temp = 0 THEN SET status = 0;
ELSE SET status = 1;
END IF; 
RETURN status;

END//
DELIMITER ;

-- Store Procedure untuk Get Follower(user_id, count post, count follower, count following)
DELIMITER //
CREATE PROCEDURE getFollower(
IN userId int
)

BEGIN
SELECT users.id AS user_id, users.username, COUNT(posts.id) AS jml_post, COUNT(likes.user_id) AS jml_like FROM users LEFT JOIN posts ON posts.user_id = users.id LEFT JOIN likes ON likes.post_id = posts.id WHERE users.id IN((SELECT follower_id FROM follows WHERE user_id = userId)) GROUP BY users.id;
END//

DELIMITER ;

-- Fungsi Cek Follower Apakah Sudah di Following
DELIMITER //
CREATE FUNCTION checkFollows(userId INT ,followerId INT)
RETURNS tinyint
BEGIN

DECLARE status int;
DECLARE row_temp int;
SELECT COUNT(*) INTO status FROM follows WHERE user_id = userId AND follower_id = followerId; 
IF row_temp = 0 THEN SET status = 0;
ELSEIF row_temp = 1 THEN SET status = 1;
END IF; 
RETURN status;

END//
DELIMITER ;

-- Store Procedure untuk Get Following(user_id, count post, count follower, count following)
DELIMITER //
CREATE PROCEDURE getFollowing(
IN userId int
)

BEGIN
SELECT users.id AS user_id, users.username, COUNT(posts.id) AS jml_post, COUNT(likes.user_id) AS jml_like FROM users LEFT JOIN posts ON posts.user_id = users.id LEFT JOIN likes ON likes.post_id = posts.id WHERE users.id IN((SELECT user_id FROM follows WHERE follower_id = userId)) GROUP BY users.id;
END//

DELIMITER ;

-- Store Procedure untuk Menampilkan Follower yang Belum di Following(ERROR)
DELIMITER //
CREATE PROCEDURE getFollowerNotFollowing(
IN userId int
)

BEGIN
SELECT users.id AS user_id, users.username, COUNT(posts.id) AS jml_post, COUNT(likes.user_id) AS jml_like FROM users LEFT JOIN posts ON posts.user_id = users.id LEFT JOIN likes ON likes.post_id = posts.id WHERE users.id IN((SELECT follower_id FROM follows WHERE user_id = userId EXCEPT SELECT user_id FROM follows WHERE follower_id = userId )) GROUP BY users.id;
END//

DELIMITER ;

-- Store Procedure untuk Rekomendasi User yang Diifollow oleh Follower dan Followin menggunakan Set Operation
DELIMITER //
CREATE PROCEDURE getRekFollows(
IN userId int
)

BEGIN
SELECT users.id AS user_id, users.username, COUNT(posts.id) AS jml_post, COUNT(likes.user_id) AS jml_like FROM users LEFT JOIN posts ON posts.user_id = users.id LEFT JOIN likes ON likes.post_id = posts.id WHERE users.id IN((SELECT user_id FROM follows WHERE follower_id IN ((SELECT follower_id FROM follows WHERE user_id = userId ) ) UNION SELECT user_id FROM follows WHERE follower_id IN ((SELECT user_id FROM follows WHERE follower_id = userId)))) GROUP BY users.id;
END//

DELIMITER ;

-- Store Procedure untuk Menampilkan Get Bookmark
DELIMITER //
CREATE PROCEDURE getBookmark(
IN userId int
)

BEGIN
SELECT * FROM posts WHERE user_id = userId;
END//

DELIMITER ;

-- Fungsi Cek apakah Post Sudah di Bookmark
DELIMITER //
CREATE FUNCTION checkPostBookmarked(userId INT ,postId INT)
RETURNS tinyint
BEGIN

DECLARE status int;
DECLARE row_temp int;
SELECT COUNT(*) INTO row_temp FROM bookmarks WHERE post_id = postId AND user_id = userId ; 
IF row_temp = 0 THEN SET status = 0;
ELSE SET status = 1;
END IF; 
RETURN status;

END//
DELIMITER ;

-- Store Procedure untuk Menampilkan Post Milik Teman(Follower dan Following)
DELIMITER //
CREATE PROCEDURE getPostsByFollows(
IN userId int
)

BEGIN
SELECT posts.id, posts.judul, posts.deskripsi, posts.link,  users.username, posts.waktu_aksi FROM posts INNER JOIN users ON posts.user_id = users.id WHERE posts.user_id  IN((SELECT user_id FROM follows WHERE follower_id = userId UNION SELECT follower_id FROM follows WHERE user_id = userId ));
END//

DELIMITER ;

-- Store Procedure untuk Menampilkan Profile
DELIMITER //
CREATE PROCEDURE getProfile(
IN userId int
)

BEGIN

DECLARE count_likes int;
DECLARE count_follower int;
DECLARE count_following int;
SELECT COUNT(id) INTO count_follower FROM users WHERE id IN((SELECT follower_id FROM follows WHERE user_id = userId));
SELECT COUNT(id) INTO count_following FROM users WHERE id IN((SELECT user_id FROM follows WHERE follower_id = userId));
SELECT COUNT(likes.post_id) INTO count_likes FROM users LEFT JOIN posts ON posts.user_id = users.id LEFT JOIN likes ON likes.post_id = posts.id WHERE users.id = userId;
SELECT * FROM posts WHERE user_id  IN((SELECT user_id FROM follows WHERE follower_id = userId UNION SELECT follower_id FROM follows WHERE user_id = userId ));
SELECT *, count_follower, count_following, count_likes FROM profile WHERE id = userId; 
END//

DELIMITER ;

-- Store Procedure untuk Menampilkan Semua Posts(pake limit buat nanti ada see more)
DELIMITER //
CREATE PROCEDURE getPosts(
IN limitTemp int
)

BEGIN
SELECT posts.id, posts.judul, posts.deskripsi, posts.link, users.username, posts.waktu_aksi FROM posts INNER JOIN users ON posts.user_id = users.id ORDER BY posts.waktu_aksi DESC LIMIT limitTemp;
END//

DELIMITER ;

-- Store Procedure untuk Menampilkan Posts Berdasarkan Keyword(BUG)
DELIMITER //
CREATE PROCEDURE getPostsByKeyword(
IN limitTemp int,
IN keyword varchar(255)
)

BEGIN
SELECT posts.id, posts.judul, posts.deskripsi, posts.link, users.username, posts.waktu_aksi FROM posts INNER JOIN users ON posts.user_id = users.id WHERE posts.judul LIKE "'%"+keyword+"%'" OR posts.deskripsi LIKE "'%"+keyword+"%'"  OR users.username LIKE "'%"+keyword+"%'" ORDER BY posts.waktu_aksi DESC LIMIT limitTemp;
END//

DELIMITER ;

CALL getPostsByKeyword(5, "Tutorial");



